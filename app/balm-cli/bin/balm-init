#!/usr/bin/env node

let download = require('download-git-repo')
let program = require('commander')
let {exists, readdirSync} = require('fs')
let path = require('path')
let ora = require('ora')
let home = require('user-home')
let tildify = require('tildify')
let chalk = require('chalk')
let inquirer = require('inquirer')
let logger = require('../lib/logger')
let generate = require('../lib/generate')
let checkVersion = require('../lib/check-version')

/**
 * Usage.
 */

program
  .usage('<template-name> [project-name]')
  .option('--offline', 'use cached template')

/**
 * Help.
 */

program.on('--help', function () {
  console.log('  Examples:')
  console.log()
  console.log(chalk.gray('    # create a new project with an official template'))
  console.log('    $ balm init vue my-project')
  console.log()
})

/**
 * Help.
 */

function help () {
  program.parse(process.argv)
  if (program.args.length < 1) return program.help()
}
help()

/**
 * Settings.
 */

let template = program.args[0]
let rawName = program.args[1]
let inPlace = !rawName || rawName === '.'
let name = inPlace ? path.relative('../', process.cwd()) : rawName
let to = path.resolve(rawName || '.')
let clone = program.clone || false

let tmp = path.join(home, '.balm-templates', template.replace(/\//g, '-'))
if (program.offline) {
  console.log(`> Use cached template at ${chalk.yellow(tildify(tmp))}`)
  template = tmp
}

/**
 * Padding.
 */

console.log()
process.on('exit', function () {
  console.log()
})

run();

/**
 * Check, download and generate the project.
 */

function run () {
  // check if template is local
  if (/^[./]|(\w:)/.test(template)) {
    let templatePath = template.charAt(0) === '/' || /^\w:/.test(template)
      ? template
      : path.normalize(path.join(process.cwd(), template))
    if (exists(templatePath)) {
      generate(name, templatePath, to, function (err) {
        if (err) logger.fatal(err)
        console.log()
        logger.success('Generated "%s".', name)
      })
    } else {
      logger.fatal('Local template "%s" not found.', template)
    }
  } else {
    checkVersion(function () {
      downloadAndGenerate(template)
    })
  }
}

/**
 * Download a generate from a template repo.
 *
 * @param {String} template
 */

function downloadAndGenerate (template) {
  let spinner = ora('downloading template')
  spinner.start()
  download('balmjs/template-' + template, tmp, { clone: clone }, function (err) {
    spinner.stop()
    if (err) logger.fatal('Failed to download repo ' + template + ': ' + err.message.trim())
    generate(name, tmp, to, function (err) {
      if (err) logger.fatal(err)
      console.log()
      logger.success('Generated "%s".', name)
    })
  })
}
